# 🧠 Smart Pet Detector: Cat vs Dog Classification with Neural Networks

A Django-based web application that uses Convolutional Neural Networks (CNN) to determine whether an uploaded image contains a cat or a dog.

## 📝 Table of Contents
- [Overview](#overview)
- [Features](#features)
- [Architecture](#architecture)
- [Prerequisites](#prerequisites)
- [Installation](#installation)
- [Project Structure](#project-structure)
- [Training the Model](#training-the-model)
- [Deployment](#deployment)
- [API Reference](#api-reference)
- [Contributing](#contributing)
- [License](#license)

## 🔍 Overview

Smart Pet Detector is an intelligent image classification system that leverages deep learning to distinguish between cats and dogs in uploaded images. Built with Django and TensorFlow/Keras, the application provides a user-friendly interface for uploading pet images and receiving instant classification results.

## ✨ Features

- User-friendly web interface for image uploads
- Fast and accurate cat vs dog classification using CNN
- Responsive design that works on both desktop and mobile devices
- RESTful API for integration with other applications
- Admin panel for monitoring system usage and performance
- Detailed classification reports with confidence scores

## 🏗️ Architecture

The application follows a modular, Object-Oriented Programming (OOP) approach with the Model-View-Controller (MVC) pattern:

```
Smart Pet Detector
│
├── Frontend Layer (HTML/CSS/JS)
│   └── Responsive Web Interface
│
├── Backend Layer (Django)
│   ├── Controllers (Django Views)
│   ├── Models (DB & Business Logic)
│   └── URL Routing
│
├── ML Pipeline
│   ├── Image Preprocessing (OpenCV/PIL)
│   ├── CNN Model (TensorFlow/Keras)
│   └── Prediction Service
│
└── Deployment Layer
    ├── Web Server (Gunicorn)
    └── Platform (Heroku/Render)
```

## 📋 Prerequisites

- Python 3.8+
- Django 4.0+
- TensorFlow 2.8+
- OpenCV or PIL
- Node.js (if using advanced frontend features)

## 🚀 Installation

1. **Clone the repository**

```bash
git clone https://github.com/yourusername/smart-pet-detector.git
cd smart-pet-detector
```

2. **Create and activate a virtual environment**

```bash
python -m venv venv
source venv/bin/activate  # On Windows: venv\Scripts\activate
```

3. **Install dependencies**

```bash
pip install -r requirements.txt
```

4. **Set up the database**

```bash
python manage.py migrate
```

5. **Create a superuser**

```bash
python manage.py createsuperuser
```

6. **Run the development server**

```bash
python manage.py runserver
```

7. **Access the application**

Open your browser and go to `http://127.0.0.1:8000/`

## 📁 Project Structure

```
smart_pet_detector/
│
├── manage.py
├── requirements.txt
├── Procfile                  # For Heroku deployment
├── runtime.txt               # Specifies Python version for deployment
│
├── static/                   # Static files (CSS, JS, images)
│   ├── css/
│   ├── js/
│   └── images/
│
├── media/                    # User uploaded files
│   └── uploads/
│
├── templates/                # HTML templates
│   ├── base.html
│   ├── index.html
│   └── result.html
│
├── smart_pet_detector/       # Main Django project
│   ├── __init__.py
│   ├── settings.py
│   ├── urls.py
│   └── wsgi.py
│
└── pet_classifier/           # Django app
    ├── __init__.py
    ├── admin.py
    ├── apps.py
    ├── forms.py
    ├── migrations/
    ├── models.py
    ├── tests.py
    ├── urls.py
    ├── views.py
    └── ml_model/              # ML model directory
        ├── __init__.py
        ├── data_preprocessing.py
        ├── model.py
        ├── train.py
        └── saved_model/       # Saved model files
```

## 🧠 Training the Model

### Option 1: Use a pre-trained model

1. Download the pre-trained model from the releases section
2. Place it in the `pet_classifier/ml_model/saved_model/` directory

### Option 2: Train your own model

1. Prepare a dataset of labeled cat and dog images
2. Run the training script:

```bash
python pet_classifier/ml_model/train.py --data_dir /path/to/dataset --epochs 20
```

## 🌐 Deployment

### Heroku Deployment

1. Create a Heroku account and install the Heroku CLI
2. Log in to Heroku and create a new app:

```bash
heroku login
heroku create smart-pet-detector
```

3. Push to Heroku:

```bash
git push heroku main
```

4. Configure environment variables:

```bash
heroku config:set DJANGO_SECRET_KEY=your_secret_key
heroku config:set DEBUG=False
```

5. Set up the database:

```bash
heroku run python manage.py migrate
heroku run python manage.py createsuperuser
```

### Render Deployment

1. Create a Render account
2. Connect your GitHub repository
3. Create a new Web Service:
   - Set build command: `pip install -r requirements.txt`
   - Set start command: `gunicorn smart_pet_detector.wsgi:application`
4. Add environment variables in the Render dashboard

## 📚 API Reference

### Upload an image for classification

**Endpoint:** `/api/classify/`

**Method:** `POST`

**Request:**
```
Content-Type: multipart/form-data
Body: image=@path/to/image.jpg
```

**Response:**
```json
{
  "status": "success",
  "prediction": "cat",
  "confidence": 0.94,
  "processing_time_ms": 235
}
```

## 🤝 Contributing

Contributions are welcome! Please feel free to submit a Pull Request.

1. Fork the repository
2. Create your feature branch (`git checkout -b feature/amazing-feature`)
3. Commit your changes (`git commit -m 'Add some amazing feature'`)
4. Push to the branch (`git push origin feature/amazing-feature`)
5. Open a Pull Request

## 📄 License

This project is licensed under the MIT License - see the LICENSE file for details.